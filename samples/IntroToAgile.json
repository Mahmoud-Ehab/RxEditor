{"topics":{"list":[{"id":1,"label":"Introduction to Agile"}]},"headlines":{"list":[{"id":1,"label":"What is Agile?","topicId":1},{"id":2,"label":"Some Agile Terminologies","topicId":1},{"id":4,"label":"Agile Principles","topicId":1}]},"sections":{"list":[{"id":1,"label":"_","content":[{"nodeName":"P","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"What is Agile?"}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"P","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile is a technique, method, strategy, used in software development \nprocess by big teams. As the name indicates, it seeks to make software \ndevelopment easier and manageable; by implying agile, the team can \nobserve the overall progress of the project development and make better \ndecisions, "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"“User Story, Burndown Chart”"}]},{"nodeName":"#text","textContent":", make more maintainable and flexible software "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"“Testing, Refactoring, and Pair Programming”"}]},{"nodeName":"#text","textContent":", and produce consistently a free-of-bugs deployable product "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"\"Sprints, and Iterative Development\""}]},{"nodeName":"#text","textContent":" — by using specific practices and artifacts (the italicized text) that we will elaborate later on."}]},{"nodeName":"#text","textContent":"\n\n"},{"nodeName":"P","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile has several methodologies — the prominent ones nowadays are \nScrum, Extreme Programming, Lean Software, and Crystal — that follow the\n same principles mentioned in "},{"nodeName":"A","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile Manifesto"}]},{"nodeName":"#text","textContent":"\n 2001. Accordingly, instead of a single development method (the \ntraditional software engineering), agile provides us with a heap of \nmethods and practices that are established and recommended by \nprofessional software engineers with a supreme experience in the field. \nMoreover, engineers can — and they should — combine between these \nmethods to wind up with the best suitable plan for their project, rather\n than embracing a single method entirely, as if it’s a tenet!"}]},{"nodeName":"#text","textContent":"\n\n"},{"nodeName":"P","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"The following two sections shall give you a satisfying overview of \nagile, that is neither too brief nor too verbose; since it covers the \noverall concepts of agile. However, you’ll find more exposition and \npractice guidance in "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"“Agile!: the Good, the Hype, and the Ugly” book, by Bertrand Meyer"}]},{"nodeName":"#text","textContent":", which is the only reference for this article."}]}],"headlineId":1},{"id":2,"label":"_","content":[{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Some Agile Terminologies"}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"#text","textContent":"This section and the following one, could be combined into one concrete section demonstrating agile principles. Actually, the content in this section is a constituent of the following one, however, it has been segregated for demonstrative reasons. You can consider it as an introductory."},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"UL","attributes":[],"childAbsNodes":[{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Velocity:"}]},{"nodeName":"#text","textContent":" indicates the project progress pace velocity; how many tasks are accomplished in a sprint (days). It’s used as a virtual artifact to observe the project state, and how the team is going on."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Big Upfront:"}]},{"nodeName":"#text","textContent":" it’s a derogatorily term used to refer to big steps, that usually ends up paralyzing the project’s velocity."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Sprint:"}]},{"nodeName":"#text","textContent":" it’s a definite period of time (a development iteration), after which the project should be ready for new version deployment, even with partial functionalities. "},{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"ROI:"}]},{"nodeName":"#text","textContent":" Return Of Investment. A virtual assessment of functions, to decide which functions should be implemented first."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Scenarios:"}]},{"nodeName":"#text","textContent":" it is a description of a particular interaction of a user with the system. Moreover, it’s considered as a replacement for requirements, while user interaction is definitely more suitable, than collecting requirements (Big Upfront process), in defining tasks. Scenario is a more general term that carries two artifacts: use case, and user story."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Use Case:"}]},{"nodeName":"#text","textContent":" it is a full run through the system. Observing the scenario from the beginning of starting the application, by the user, to the completion of a certain task(s)."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"User Story:"}]},{"nodeName":"#text","textContent":" it is a declaration of small unit of functionality expected by the users. Such as: “As a customer, I want to be able to delete my account”, “As a customer, I want to make some information in my account private”... etc."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Burndown chart:"}]},{"nodeName":"#text","textContent":" a record of a project’s velocity."}]},{"nodeName":"LI","attributes":[],"childAbsNodes":[{"nodeName":"B","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Planning Game:"}]},{"nodeName":"#text","textContent":" a group estimation techniques which ask the participants to come with initial estimates independently, then examine each other’s estimates and iterate until a consensus is reached."}]}]}]},{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]}],"headlineId":2},{"id":4,"label":"_","content":[{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile Principles"}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"The principles are followed from the values, which mentioned in the "},{"nodeName":"A","attributes":[{"name":"href","value":"https://agilemanifesto.org/"}],"childAbsNodes":[{"nodeName":"#text","textContent":"manifesto"}]},{"nodeName":"#text","textContent":", and from these principles each methodology devises its own practices and artifacts, that fulfill the principles and therefore preserve the values."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"There are twelve "},{"nodeName":"A","attributes":[{"name":"href","value":"https://agilemanifesto.org/principles.html"}],"childAbsNodes":[{"nodeName":"#text","textContent":"principles"}]},{"nodeName":"#text","textContent":" mentioned in the manifesto. In this section, we are going to discuss, separately, each principle and mention its followed practices and artifacts."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"IMG","attributes":[{"name":"src","value":"https://dev-to-uploads.s3.amazonaws.com/uploads/articles/oidmyfukal2w3ykk0bjl.png"},{"name":"width","value":"90%"},{"name":"height","value":""}],"childAbsNodes":[{"nodeName":"#text","textContent":"Empty"}]},{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"1. Continues Delivery"},{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Our highest priority is to satisfy the customer through early and continuous delivery of valuable software."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Earlier, in traditional software engineering, it wasn't uncommon to split the project into sub-developments and then, at the end of the development or after few months, integrate those constituents all together to institute the whole project. This practice was effective in simplifying the development of the project, however, it was impediment for deployment. It takes much time to fix the bugs and incompatibility between different parts (sub-developments) of the system."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Therefore, agile methodologies advocate CI / CD (Continuous Integration & Continuous Delivery). The sub-developments should be integrated frequently, in order to provide two values: "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"working software"}]},{"nodeName":"#text","textContent":" and "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"customer collaboration"}]},{"nodeName":"#text","textContent":". The first is accomplished, in the sense of fixing bugs and incompatibility as soon as possible, by integrating the parts after few weeks, rather than months (there are methodologies recommend doing it several times a day). Moreover, the later is accomplished by producing working software after each integration to the customer for feedback."}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"2. Accept Changes and Customer Role"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Welcome changing requirements, even late in development. Agile processes harness change for the customer's competitive advantage."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"In agile, the customer has a central role in the project development. Rather than documenting the requirements at the planning phase of the project — which considered as a big upfront — we let it evolves as the project develops, by giving the customer a central role that usually concerns in trying intermediate releases of the project. This approach, replacing the requirements or vanishing big upfronts, is almost applied by all agile principles."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"3. Working Software"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Deliver working software frequently, from a couple of weeks to a couple of months, with a preference to the shorter timescale."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Working software is the primary measure of progress."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"These two principles may seem redundant of the first one listed in this section. However, the both demonstrates a guideline that our practices shall follow. These two principles telling us that we should always be able and ready to produce and deploy a working software (new version of the application) after each sprint, even if with partial functionality. Neither The deadline can be postponed for deployment, nor the application can be deployed with bugs, because of adding new feature to the application."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"So, the primary measure of progress is not how many functionalities have been added. Working software has more priority in agile development, and the software is assured working through the use of test suites."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"4. Team Meetings"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Business people and developers must work together daily throughout the project."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"This principle is, obviously, a practice than it’s a principle. Agile methods advocate frequent face-to-face contact between team members. It helps teams remain cohesive, know what everyone is doing, and spot problems early."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"5. Open Rooms and Pair Programming"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Build projects around motivated individuals. Give them the environment and support they need, and trust them to get the job done."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> The most efficient and effective method of conveying information to and within a development team is face-to-face conversation."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile methodologies reject and revolt on cubicles and closed offices. It’s preferable to set up the office as an open room to favor constant interaction between team members. Moreover, a common practice of agile, is pair programming. In which the code is written by one developer, while being supervised or criticized by another developer. This helps catching mistakes or even bad code early."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"6. Sustainable Development"}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Agile processes promote sustainable development. The sponsors, developers, and users should be able to maintain a constant pace indefinitely."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Again, another principle seems redundant; all the previous principles certainly invoke sustainability. However, it may have other meanings or values. This principle refuses putting the team in an exceptional pressure, rather, the developers should work in reasonable hours, preserving evenings and weekends. It could be considered as a revolt on managers, as we may see in later principle."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"7. Refactoring and TDD"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Continuous attention to technical excellence and good design enhances agility."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"To make our software agile, we should create a test for every single code. Concisely, we should not write any new code before creating its unit tests. Therefore, the test comes first then we think about the simplest code that makes that test passes, and we iterate these two steps over and over again, until there is no more test to be passed. In other words, this part of the software we are working on is done. This approach is known as "},{"nodeName":"I","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Test-Driven Development"}]},{"nodeName":"#text","textContent":"."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Eventually, applying TDD winds up with a fragile, messy, and miserable design of the code. And here comes another significant practice in agile, "},{"nodeName":"EM","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Refactoring"}]},{"nodeName":"#text","textContent":". Which is the process of critically examining a design or implementation and applying any transformations that may be needed to improve its consistency. (It may not seem obvious, if one doesn’t know what software design & architecture is)"}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"8. Minimalistic Funcationality"}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> Simplicity--the art of maximizing the amount of work not done--is essential."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"The development phase in agile methods should be as simple as possible, as the team must be able to deploy a new version in two weeks! Therefor, the functionalities that need to be done in the next iteration (sprint), must be essential and requested by the customer. So, if the team meeting before the beginning of any sprint "},{"nodeName":"I","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"“planning game”"}]},{"nodeName":"#text","textContent":", winded up with ten functionalities whilst two of them are only essential for the user, the other eight functionalities are excluded for next iterations. It’s a matter of concern to be aware of that the ROI is definitely used in the exclusion process."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"9. Self-Organizing Team"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> The best architectures, requirements, and designs emerge from self-organizing teams."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Agile methods redefine and limit the manager’s job by transferring many of the duties to the team as a whole, including one of the most important responsibilities: selecting tasks to be performed and assigning them to developers. Agile teams are self-organizing, deciding on their own tasks."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"H1","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"10. Retrospective"}]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":""},{"nodeName":"STRONG","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"> At regular intervals, the team reflects on how to become more effective, then tunes and adjusts its behavior accordingly."}]},{"nodeName":"#text","textContent":""}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"#text","textContent":"Another agile practice is the retrospective, in which a team having finished a development iteration takes time off further development to reflect on the experience and the lessons learned, with the goal of improving its development process."}]},{"nodeName":"DIV","attributes":[],"childAbsNodes":[{"nodeName":"BR","attributes":[],"childAbsNodes":[]}]}]}],"headlineId":4}]}}